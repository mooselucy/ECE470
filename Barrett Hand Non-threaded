function sysCall_init() 
    jointHandles={{-1,-1,-1},{-1,-1,-1},{-1,-1,-1}}
    firstPartTorqueSensorHandles={-1,-1,-1}
    for i=0,2,1 do
        if (i~=1) then
            jointHandles[i+1][1]=sim.getObjectHandle('BarrettHand_jointA_'..i)
        end
        jointHandles[i+1][2]=sim.getObjectHandle('BarrettHand_jointB_'..i)
        jointHandles[i+1][3]=sim.getObjectHandle('BarrettHand_jointC_'..i)
        firstPartTorqueSensorHandles[i+1]=sim.getObjectHandle('BarrettHand_jointB_'..i)
    end
    modelHandle=sim.getObjectAssociatedWithScript(sim.handle_self)
    ui=simGetUIHandle('BarrettHand')
    simSetUIButtonLabel(ui,0,sim.getObjectName(modelHandle))
    closing=true
    firstPartLocked={false,false,false}
    needFullOpening={0,0,0}
    firstPartTorqueOvershootCount={0,0,0}
    firstPartTorqueOvershootCountRequired=1
    firstPartMaxTorque=0.9

    closingVel=60*math.pi/180
    openingVel=-120*math.pi/180

    closingOpeningTorque=1

    for i=1,3,1 do
        sim.setObjectInt32Parameter(jointHandles[i][2],sim.jointintparam_motor_enabled,1)
        sim.setObjectInt32Parameter(jointHandles[i][2],sim.jointintparam_ctrl_enabled,0)
        sim.setObjectInt32Parameter(jointHandles[i][3],sim.jointintparam_motor_enabled,1)
        sim.setObjectInt32Parameter(jointHandles[i][3],sim.jointintparam_ctrl_enabled,1)
        sim.setJointTargetVelocity(jointHandles[i][2],-closingVel)
        sim.setJointTargetVelocity(jointHandles[i][3],-closingVel/3)
        sim.setJointForce(jointHandles[i][2],closingOpeningTorque)
        sim.setJointForce(jointHandles[i][3],closingOpeningTorque)
    end
end
-- See the end of the script for instructions on how to do efficient grasping


function sysCall_cleanup() 
    for i=1,3,1 do
        sim.setObjectInt32Parameter(jointHandles[i][2],sim.jointintparam_motor_enabled,1)
        sim.setObjectInt32Parameter(jointHandles[i][2],sim.jointintparam_ctrl_enabled,0)
        sim.setObjectInt32Parameter(jointHandles[i][3],sim.jointintparam_motor_enabled,1)
        sim.setObjectInt32Parameter(jointHandles[i][3],sim.jointintparam_ctrl_enabled,1)
        sim.setJointTargetVelocity(jointHandles[i][2],-closingVel)
        sim.setJointTargetVelocity(jointHandles[i][3],-closingVel/3)
        sim.setJointForce(jointHandles[i][2],closingOpeningTorque)
        sim.setJointForce(jointHandles[i][3],closingOpeningTorque)
    end
end 

function sysCall_actuation()
    
    
    
    x = sim.persistentDataRead('proxdata',response)
    if (x == 0) then
        h = 8536
        print(x)
        h = 8536 -- close
        sim.setJointTargetPosition(jointHandles[1][1],-math.pi*0.5+math.pi*simGetUISlider(ui,21)/1000)
        sim.setJointTargetPosition(jointHandles[3][1],-math.pi*0.5+math.pi*simGetUISlider(ui,21)/1000)
        --closing=sim.boolAnd32(simGetUIButtonProperty(ui,20),sim.buttonproperty_isdown)~=0
        closing=sim.boolAnd32(h,sim.buttonproperty_isdown)~=0
        --print(x)
        
        
        
        
        
        
        for i=1,3,1 do
            if (closing)and(needFullOpening[1]~=2)and(needFullOpening[2]~=2)and(needFullOpening[3]~=2) then
                if (firstPartLocked[i]) then
                    sim.setJointTargetVelocity(jointHandles[i][3],closingVel/3)
                else
                    t=simJointGetForce(firstPartTorqueSensorHandles[i])
                    if (t)and(t<-firstPartMaxTorque) then
                        firstPartTorqueOvershootCount[i]=firstPartTorqueOvershootCount[i]+1
                    else
                        firstPartTorqueOvershootCount[i]=0
                    end
                    if (firstPartTorqueOvershootCount[i]>=firstPartTorqueOvershootCountRequired) then
                        needFullOpening[i]=1
                        firstPartLocked[i]=true
                        -- First joint is now locked and holding the position:
                        sim.setObjectInt32Parameter(jointHandles[i][2],sim.jointintparam_ctrl_enabled,1)
                        sim.setJointForce(jointHandles[i][2],closingOpeningTorque*100)
                        sim.setJointTargetPosition(jointHandles[i][2],sim.getJointPosition(jointHandles[i][2]))
                        -- second joint is now not in position control anymore:
                        sim.setObjectInt32Parameter(jointHandles[i][3],sim.jointintparam_ctrl_enabled,0)
                        sim.setJointTargetVelocity(jointHandles[i][3],closingVel/3)
                    else
                        sim.setJointTargetVelocity(jointHandles[i][2],closingVel)
                        sim.setJointTargetPosition(jointHandles[i][3],(45*math.pi/180)+sim.getJointPosition(jointHandles[i][2])/3)
                    end
                end
            else
                if (needFullOpening[i]==1) then
                    needFullOpening[i]=2
                end
                sim.setJointTargetVelocity(jointHandles[i][3],openingVel/3)
                if (firstPartLocked[i]) then
                    jv=sim.getJointPosition(jointHandles[i][3])
                    if (jv<45.5*math.pi/180) then
                        firstPartLocked[i]=false -- we unlock the first part
                        sim.setObjectInt32Parameter(jointHandles[i][2],sim.jointintparam_ctrl_enabled,0)
                        sim.setJointForce(jointHandles[i][2],closingOpeningTorque)
                        sim.setJointTargetVelocity(jointHandles[i][2],openingVel)
                    end
                else
                    if (needFullOpening[i]~=0) then
                        jv3=sim.getJointPosition(jointHandles[i][3])
                        jv2=sim.getJointPosition(jointHandles[i][2])
                        if (jv3<45.5*math.pi/180)and(jv2<2*math.pi/180) then
                            needFullOpening[i]=0
                            -- second joint is now again in position control:
                            sim.setObjectInt32Parameter(jointHandles[i][3],sim.jointintparam_ctrl_enabled,1)
                            sim.setJointTargetPosition(jointHandles[i][3],(45*math.pi/180)+sim.getJointPosition(jointHandles[i][2])/3)
                        end
                    else
                        sim.setJointTargetVelocity(jointHandles[i][2],openingVel)
                        sim.setJointTargetPosition(jointHandles[i][3],(45*math.pi/180)+sim.getJointPosition(jointHandles[i][2])/3)
                    end
                end
            end
        end
    else
        h = 8280
            sim.setJointTargetPosition(jointHandles[1][1],-math.pi*0.5+math.pi*simGetUISlider(ui,21)/1000)
        sim.setJointTargetPosition(jointHandles[3][1],-math.pi*0.5+math.pi*simGetUISlider(ui,21)/1000)
        --closing=sim.boolAnd32(simGetUIButtonProperty(ui,20),sim.buttonproperty_isdown)~=0
        closing=sim.boolAnd32(h,sim.buttonproperty_isdown)~=0
        --print(x)
        
        
        
        
        
        
        for i=1,3,1 do
            if (closing)and(needFullOpening[1]~=2)and(needFullOpening[2]~=2)and(needFullOpening[3]~=2) then
                if (firstPartLocked[i]) then
                    sim.setJointTargetVelocity(jointHandles[i][3],closingVel/3)
                else
                    t=simJointGetForce(firstPartTorqueSensorHandles[i])
                    if (t)and(t<-firstPartMaxTorque) then
                        firstPartTorqueOvershootCount[i]=firstPartTorqueOvershootCount[i]+1
                    else
                        firstPartTorqueOvershootCount[i]=0
                    end
                    if (firstPartTorqueOvershootCount[i]>=firstPartTorqueOvershootCountRequired) then
                        needFullOpening[i]=1
                        firstPartLocked[i]=true
                        -- First joint is now locked and holding the position:
                        sim.setObjectInt32Parameter(jointHandles[i][2],sim.jointintparam_ctrl_enabled,1)
                        sim.setJointForce(jointHandles[i][2],closingOpeningTorque*100)
                        sim.setJointTargetPosition(jointHandles[i][2],sim.getJointPosition(jointHandles[i][2]))
                        -- second joint is now not in position control anymore:
                        sim.setObjectInt32Parameter(jointHandles[i][3],sim.jointintparam_ctrl_enabled,0)
                        sim.setJointTargetVelocity(jointHandles[i][3],closingVel/3)
                    else
                        sim.setJointTargetVelocity(jointHandles[i][2],closingVel)
                        sim.setJointTargetPosition(jointHandles[i][3],(45*math.pi/180)+sim.getJointPosition(jointHandles[i][2])/3)
                    end
                end
            else
                if (needFullOpening[i]==1) then
                    needFullOpening[i]=2
                end
                sim.setJointTargetVelocity(jointHandles[i][3],openingVel/3)
                if (firstPartLocked[i]) then
                    jv=sim.getJointPosition(jointHandles[i][3])
                    if (jv<45.5*math.pi/180) then
                        firstPartLocked[i]=false -- we unlock the first part
                        sim.setObjectInt32Parameter(jointHandles[i][2],sim.jointintparam_ctrl_enabled,0)
                        sim.setJointForce(jointHandles[i][2],closingOpeningTorque)
                        sim.setJointTargetVelocity(jointHandles[i][2],openingVel)
                    end
                else
                    if (needFullOpening[i]~=0) then
                        jv3=sim.getJointPosition(jointHandles[i][3])
                        jv2=sim.getJointPosition(jointHandles[i][2])
                        if (jv3<45.5*math.pi/180)and(jv2<2*math.pi/180) then
                            needFullOpening[i]=0
                            -- second joint is now again in position control:
                            sim.setObjectInt32Parameter(jointHandles[i][3],sim.jointintparam_ctrl_enabled,1)
                            sim.setJointTargetPosition(jointHandles[i][3],(45*math.pi/180)+sim.getJointPosition(jointHandles[i][2])/3)
                        end
                    else
                        sim.setJointTargetVelocity(jointHandles[i][2],openingVel)
                        sim.setJointTargetPosition(jointHandles[i][3],(45*math.pi/180)+sim.getJointPosition(jointHandles[i][2])/3)
                    end
                end
            end
        end
    end
    
    -- You have basically 2 alternatives to grasp an object:
    --
    -- 1. You try to grasp it in a realistic way. This is quite delicate and sometimes requires
    --    to carefully adjust several parameters (e.g. motor forces/torques/velocities, friction
    --    coefficients, object masses and inertias)
    --
    -- 2. You fake the grasping by attaching the object to the gripper via a connector. This is
    --    much easier and offers very stable results.
    --
    -- Alternative 2 is explained hereafter:
    --
    --
    -- a) In the initialization phase, retrieve some handles:
    -- 
    -- connector=sim.getObjectHandle('BarrettHand_attachPoint')
    -- objectSensor=sim.getObjectHandle('BarrettHand_attachProxSensor')
    
    -- b) Before closing the gripper, check which dynamically non-static and respondable object is
    --    in-between the fingers. Then attach the object to the gripper:
    --
    -- index=0
    -- while true do
    --     shape=sim.getObjects(index,sim.object_shape_type)
    --     if (shape==-1) then
    --         break
    --     end
    --     if (sim.getObjectInt32Parameter(shape,sim.shapeintparam_static)==0) and (sim.getObjectInt32Parameter(shape,sim.shapeintparam_respondable)~=0) and (sim.checkProximitySensor(objectSensor,shape)==1) then
    --         -- Ok, we found a non-static respondable shape that was detected
    --         attachedShape=shape
    --         -- Do the connection:
    --         sim.setObjectParent(attachedShape,connector,true)
    --         break
    --     end
    --     index=index+1
    -- end
    
    -- c) And just before opening the gripper again, detach the previously attached shape:
    --
    -- sim.setObjectParent(attachedShape,-1,true)
 
end 